import { NextRequest, NextResponse } from 'next/server'
import sharp from 'sharp'

export async function POST(request: NextRequest) {
  try {
    const formData = await request.formData()
    const file = formData.get('image') as Blob
    
    if (!file) {
      return NextResponse.json(
        { error: '没有上传文件' },
        { status: 400 }
      )
    }

    const arrayBuffer = await file.arrayBuffer()
    const buffer = Buffer.from(arrayBuffer)

    const imageInfo = await sharp(buffer).metadata()
    const imageWidth = imageInfo.width || 800

    const baseWidth = 1000
    const baseWatermarkWidth = 220

    const scale = imageWidth / baseWidth
    const watermarkWidth = Math.round(baseWatermarkWidth * scale)
    const watermarkHeight = Math.round(40 * scale)
    const fontSize = Math.round(20 * scale)
    
    // !!! Not Generated by AI
    const watermarkSvg = Buffer.from(`
      <svg width="${watermarkWidth}" height="${watermarkHeight}">
        <rect x="0" y="${Math.round(5 * scale)}"
              width="${watermarkWidth}" height="${Math.round(30 * scale)}"
              rx="${Math.round(5 * scale)}" ry="${Math.round(5 * scale)}"
              fill="rgba(0, 0, 0, 0.5)"
        />
        <text x="${watermarkWidth/2}" y="${Math.round(27 * scale)}" 
          dominant-baseline="middle"
          text-anchor="middle" 
          fill="white" 
          font-size="${fontSize}px"
          font-weight="500"
          font-family="system-ui, -apple-system, sans-serif"
        >Not generated by AI</text>
      </svg>
    `)

    // 处理图片并添加水印
    const processedImage = await sharp(buffer)
      .composite([
        {
          input: watermarkSvg,
          gravity: 'southeast',
        },
      ])
      .webp()
      .toBuffer()

    return new NextResponse(processedImage, {
      headers: {
        'Content-Type': 'image/webp',
      },
    })
  } catch (error) {
    console.error('Error processing image:', error)
    return NextResponse.json(
      { error: '图片处理失败' },
      { status: 500 }
    )
  }
} 